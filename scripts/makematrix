#!/usr/bin/env bash

export SCRIPTDIR=`dirname $0`
source $SCRIPTDIR/comet_script_settings

echo
IDENTIFIER=$1
IDENTIFIER=${IDENTIFIER%%/}
RUNDIR=$BASEDIR/$IDENTIFIER

if [ ! -f $RUNDIR/setparam.txt ]; then
	
echo Error: $RUNDIR/1/nodesupdate.txt not found
echo Is $RUNDIR a valid run set directory?
echo
exit
	
fi

EMAIL=markdayel@gmail.com

#TOTFRAMES=500
# assume that set 1 exists...
TOTFRAMES=`cat $RUNDIR/1/nodesupdate.txt | wc -l`

#TIMESTEPS=4
TIMESTEPS=`echo "$TOTFRAMES / 100" | bc`

TOTALTIME=`cat $RUNDIR/1/cometparams.ini | grep TOTAL_SIMULATION_TIME | cut -d' ' -f 2`

# if running on mac, expects to start in the base directory of the run set

if [ `echo ${OSTYPE:0:6 }` == "darwin" ] ; then 
	# on cluster, these must be 1x10 and 10x1, on OS X they must be 1x and x1
	# ( the 10 is just a number greater than the max STEPS )
	VTILE=1x
	HTILE=x1
	HEADNODE=localhost
	#BASEDIR=/Volumes/500GB_Drive/runs/${1}
	#BASEDIR=`pwd`
else
	# VTILE=1x20
	# HTILE=20x1
	VTILE=1x
	HTILE=x1
fi


MONITOR=""
#MONITOR="-monitor"


echo $TOTFRAMES frames, $TIMESTEPS timesteps

# scaling factor for images (percent)
SIZE=25

BOARDER=1
BACKGROUND1=grey20
BACKGROUND2=grey20
TXTSIZE=70
TXTHEIGHT=20
FONT=Helvetica
IMAGETYPE=jpg

# dimensions from comet program:
IMAGEX=800
IMAGEY=800


echo "Processing $RUNDIR"



# find number of steps
read -d ' ' STEPS othervariables < $RUNDIR/setparam.txt


FINALIMAGEX=`echo "$IMAGEX * $SIZE * 0.01" | bc`
FINALIMAGEY=`echo "$IMAGEY * $SIZE * 0.01" | bc`

# X and Y are reversed here, because the full image is a multiple of little images on their sides
FULLY=`echo "$FINALIMAGEX * $TIMESTEPS " | bc`
FULLX=`echo "$FINALIMAGEY * $STEPS " | bc`


#export PATH=$PATH:$HOME/bin
#export LD_LIBRARY_PATH=$HOME/lib
#export MAGICK_CONFIGURE_PATH=$HOME/IMconfig/


cd $RUNDIR

makevelmulti

LASTLINE=`grep -n "nd of main settings" cometparams.ini | awk 'BEGIN { FS = ":" } ; { print $1 }' `
LASTLINE=`echo "$LASTLINE - 1" | bc`


#tempdir=$RUNDIR/makematrix_tmp_${RANDOM}
tempdir=`mktemp -d /tmp/makematrix.XXXXXX` || exit 1
#tempdir=`mktemp -d`

echo "Working in $tempdir"

mkdir -p $tempdir
cd $tempdir
#MAGICK_TMPDIR="$tempdir"

# create blank images for spacing, or for later text

convert $MONITOR  -size ${IMAGEX}x${IMAGEY} xc:#FFFFFF blank.jpeg
convert $MONITOR  -size ${FINALIMAGEX}x${FINALIMAGEY} xc:#FFFFFF blanksmall.jpeg
convert $MONITOR  -size ${FINALIMAGEY}x${TXTHEIGHT} xc:#FFFFFF -resize 400% blankheader1.jpeg
convert $MONITOR  -size ${FINALIMAGEX}x${TXTHEIGHT} xc:#FFFFFF -resize 400% blankheader2.jpeg
convert $MONITOR  -size ${TXTHEIGHT}x${TXTHEIGHT} xc:#FFFFFF blanktimeheader.png
convert $MONITOR  -size ${FULLX}x${TXTHEIGHT} xc:#FFFFFF -resize 400% blankfulltitle1.png
convert $MONITOR  -size ${FULLY}x${TXTHEIGHT} xc:#FFFFFF -resize 400% blankfulltitle2.png

# create blank frame images if missing

FILENAMES=""

for ((a=1; a <= TIMESTEPS ; a++))
do
	for ((b=1; b <= STEPS ; b++))
	do

		((FRAME = TOTFRAMES * a / TIMESTEPS))
		FRAMENUM=`printf "%05d" $FRAME `

		((POSN = TIMESTEPS - a ))

		FILENAME=$RUNDIR/${b}/bitmaps/x_proj_${FRAMENUM}.jpeg

		  if [ ! -f $FILENAME ]; then
		    echo "$FILENAME absent, writing substitute blank image"
			mkdir -p $RUNDIR/${b}/bitmaps/
		    cp blank.jpeg $FILENAME
		  fi

	done

done



# make main image array

echo Set $IDENTIFIER Making Image montage $MONITOR

for ((a=1; a <= TIMESTEPS ; a++))
do

	((FRAME = TOTFRAMES * a / TIMESTEPS))

	FRAMENUM=`printf "%05d" $FRAME `

	FILENAMES=""
 
	for ((b=STEPS; b >= 1 ; b--))
	do

		FILENAMES=$FILENAMES$RUNDIR/${b}/bitmaps/x_proj_${FRAMENUM}.jpeg
		FILENAMES=$FILENAMES" "

	done

	#echo $FILENAMES

	montage $MONITOR $FILENAMES -resize ${SIZE}% -tile ${VTILE} \
	-geometry +0+$BOARDER -background $BACKGROUND1 frame${FRAMENUM}list.png

done

#mogrify -rotate 90 frame*list.png

# make headers

echo Set $IDENTIFIER Making headers

# make headers for variables

COLUMN=0

echo Making parameter headers

(read -d ' ' STEPS 
read -d ' ' variable
echo "Varying $variable in $STEPS steps"
convert $MONITOR  blankfulltitle1.png -pointsize ${TXTSIZE} -font ${FONT} -background white -gravity center -annotate 0 $variable -resize 25% paramheadertitle1.png

echo -n Values: 
while read -d ' ' factor
do

	echo -n " $factor"

	((COLUMN = COLUMN + 1))

	convert $MONITOR  blankheader1.jpeg   -pointsize ${TXTSIZE} -font ${FONT} -background white -gravity center -annotate 0 $factor  -resize 25% paramheader${COLUMN}.png

	lastfactor=$factor

done ) < $RUNDIR/setparam.txt

read STEPS variable firstfactor otherfactors < $RUNDIR/setparam.txt

echo

montage $MONITOR paramheader[0-${STEPS}].png -tile ${HTILE} -geometry +$BOARDER+$BOARDER  paramsheading.png

# make headers for time
echo "Making time headers"

convert $MONITOR  blankfulltitle2.png -pointsize ${TXTSIZE} -font ${FONT} -background white -gravity center -annotate 0 Time -resize 25% timetimeheadertitle.png

echo -n "Times:"

for ((a=1; a <= TIMESTEPS ; a++))
do

	((FRAME = TOTFRAMES * a / TIMESTEPS))

	((POSN = TIMESTEPS - a ))

	FRAMETIME=`echo "$FRAME * $TOTALTIME / $TOTFRAMES" | bc -l`
	FRAMETIME=${FRAMETIME%%.*}
	echo -n " $FRAMETIME"

	convert $MONITOR  blankheader2.jpeg -pointsize ${TXTSIZE} -font ${FONT} -background white -gravity center -annotate 0 $FRAMETIME -resize 25% timeheader${POSN}.png

done

mogrify -rotate -90 paramsheading.png
mogrify -rotate -90 paramheadertitle1.png
mogrify -rotate -90 timeheader*.png

echo

montage $MONITOR timeheader*.png -mode concatenate -tile ${VTILE} -geometry +$BOARDER+$BOARDER  timeheading1.png

# add two empty blocks to top for alignment
montage $MONITOR timeheading1.png blanktimeheader.png blanktimeheader.png -mode concatenate -tile ${VTILE} timeheading.png
#montage $MONITOR timetimeheadertitle.png blanktimeheader.png blanktimeheader.png -mode concatenate -tile ${VTILE} timeheadertitle2.png

mogrify -rotate +90 timeheading.png
#mogrify -rotate -90 timeheadertitle2.png


# convert $MONITOR top of params file into image

head -n $LASTLINE $RUNDIR/cometparams.ini | sed -e 's/#.*//' -e 's/[ ^I]*$//' -e '/^$/ d' | awk '
BEGIN{FS=" "}
{printf("%-25s%s\n",$1,$2)}
END{}' > params0.txt

( echo -e '\n\n' Host: `hostname` '\n' ID: ${IDENTIFIER} '\n\n';  cat params0.txt) > params.txt 
convert $MONITOR -density 600 -font Courier  -pointsize 10 text:params.txt[0] -trim +repage -bordercolor white  -border 20 -resize 15% paramsimage.png

echo Assembling rows of data

# assemble rows of data
montage $MONITOR frame*list.png -tile ${HTILE} -geometry +$BOARDER+$BOARDER -background $BACKGROUND2 imagearray1.png
montage $MONITOR -mode concatenate -gravity east imagearray1.png  $RUNDIR/velocities_all.png -tile ${HTILE} -background $BACKGROUND2 imagearray1v.png
mv imagearray1v.png imagearray1.png

echo  Assembling variable titles
# add the variable titles
montage $MONITOR -mode concatenate -tile ${HTILE} -gravity east paramheadertitle1.png paramsheading.png imagearray1.png imagearray1a.png

echo Assembling time titles
# add the time titles
montage $MONITOR -mode concatenate -tile ${VTILE} timetimeheadertitle.png timeheading.png  imagearray1a.png imagearray1b.png

# add the parameters file pic
echo Adding parameters
montage $MONITOR -mode concatenate -tile ${HTILE} -gravity center  paramsimage.png imagearray1b.png  imagearray1c.png

convert imagearray1c.png -background white -flatten imagearray1d.png

echo Making greyscale copy
convert $MONITOR -quality 95 imagearray1d.png $RUNDIR/${IDENTIFIER}_imagearray.${IMAGETYPE}
convert $MONITOR -quality 95 imagearray1d.png  -channel green -separate $RUNDIR/${IDENTIFIER}_imagearraytoprint.${IMAGETYPE}

mv imagearray1c.png $RUNDIR/imagearray.png
mv frame*list.png $RUNDIR

rm $tempdir/*.png
rm $tempdir/*.jpeg
rm $tempdir/*.txt
cd ..

rmdir $tempdir

FINALSIZE=`du -h $RUNDIR/${IDENTIFIER}_imagearray.${IMAGETYPE} | cut -f1`

echo "Set $IDENTIFIER Emailing Image ($FINALSIZE ${IMAGETYPE}) to $EMAIL"

#ssh $HEADNODE "
(echo -e Varying $variable from $firstfactor to $lastfactor '\n\n' ) | \
 mutt -s "`hostname` Set ${IDENTIFIER} Finished" -a $RUNDIR/${IDENTIFIER}_imagearray.${IMAGETYPE}  "$EMAIL" 
