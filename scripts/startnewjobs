#!/usr/bin/env bash

# hosts lists all the hosts to run on
# ssh must be set up for passwordless login, and
# directories shared in same path on all machines

source $HOME/.profile
source comet_script_settings

# start new job if 5 min load average is less than THRESHOLD
THRESHOLD=0.2
#THRESHOLD=1.0

JOBFILE="$BASEDIR/joblist"

JOBINFOFILE="$BASEDIR/jobinfo.txt"

TOTJOBS=`awk 'END { print NR }' $JOBFILE`
if [ $TOTJOBS == "0" ]; then
   echo "Job queue is empty --- exiting"
   exit 0
fi


LOCK_FILE=${JOBFILE}.lock

(set -C; : > $LOCK_FILE) 2> /dev/null
if [ $? != "0" ]; then
   echo "Lock File $LOCK_FILE exists - exiting"
   exit 1
fi

date

echo Checking load on machines, threshold is $THRESHOLD

for MACHINE in $HOSTS
do

	echo -n $MACHINE :
	REMOTEUPTIME=`ssh -oConnectTimeout=1 -x $MACHINE "uptime"`
	if [ "$?" -eq 255 ] ; then
		echo
		echo HOST $MACHINE IS DOWN, skipping
		echo
		continue
	fi
	#LOAD1MIN=$(echo $REMOTEUPTIME | awk -F "load avera.*: " '{ print $2 }' | cut -d' ' -f1)
	#LOAD5MIN=$(echo $REMOTEUPTIME | awk -F "load avera.*: " '{ print $2 }' | cut -d' ' -f2)
	LOAD1MIN=$(echo $REMOTEUPTIME | awk -F "load avera.*:" '{ print $2 }' | cut -d, -f1)
	LOAD5MIN=$(echo $REMOTEUPTIME | awk -F "load avera.*:" '{ print $2 }' | cut -d, -f2)
	echo -n "$LOAD1MIN $LOAD5MIN "

	RESULT=$(echo "($LOAD1MIN < $THRESHOLD ) && ($LOAD5MIN < $THRESHOLD )" | bc -l )

	#echo -n "$RESULT "

	if [ "$RESULT" == "1" ] ; then 
		echo " Load Average below threshold---starting new job"

		# get job from first line
		JOB=`head -n 1 $JOBFILE`

		IDENTIFIER=`echo "$JOB" | cut -d' ' -f1 ` 
		COMMAND=`echo "$JOB" | cut -d' ' -f2- `

		# delete this line from job queue
		mv $JOBFILE $JOBFILE.tmp
		tail -n+2 $JOBFILE.tmp > $JOBFILE
		rm $JOBFILE.tmp

		echo "Starting job on $MACHINE: $JOB"

		TIME=`date +"%m-%d-%y_%H%M"`

		echo "$IDENTIFIER started on $MACHINE at $TIME" >>$JOBINFOFILE

		screen.real -dmS ${IDENTIFIER}_$MACHINE /usr/bin/ssh -x $MACHINE $COMMAND

		echo

		TOTJOBS=`awk 'END { print NR }' $JOBFILE`
		if [ $TOTJOBS == "0" ]; then
		   echo "Job queue is empty --- exiting"
		   break
		fi

	else 
		echo " Machine busy --- skipping"
	fi

done

trap 'rm $LOCK_FILE' EXIT

