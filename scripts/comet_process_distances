#!/usr/bin/env bash

# data processing script for use with comet 
# (c) Mark J Dayel 2009
# 
# takes the nodedistances.txt output of the program
# and compiles into csv files:
# distoutput.csv: measurement length changes over time
# distnormalized.csv: normalized lengths (normalized to first length)
# distaverage.csv" average (and SDs) of normalized lengths

tmpdir=`mktemp -d -t process_comet_distances` 

if [ "$tmpdir" == "" ] ; then
        echo "unable to create temp dir"
        exit
fi

echo Using temp dir: $tmpdir

sort -k 2n -k 1n nodedistances.txt | uniq > $tmpdir/nodedistances1.txt

cat $tmpdir/nodedistances1.txt | cut -d' ' -f1-4 > $tmpdir/nodedistances2.txt

cat $tmpdir/nodedistances2.txt | cut -d' ' -f1 | sort -k 1n | uniq  >  $tmpdir/framenos.txt
cat $tmpdir/nodedistances2.txt | cut -d' ' -f3 | sort -k 1n | uniq  >  $tmpdir/nodenos.txt
cat $tmpdir/nodedistances2.txt | cut -d' ' -f3,4  >  $tmpdir/frameanddistances.txt

cat $tmpdir/framenos.txt | tr '\n' ' ' > $tmpdir/distoutput.txt
echo >> $tmpdir/distoutput.txt



cat $tmpdir/nodenos.txt | while read NODENUM
do

grep ^$NODENUM $tmpdir/frameanddistances.txt | cut -d' ' -f2 | tr '\n' ' ' >> $tmpdir/distoutput.txt
echo >> $tmpdir/distoutput.txt

done


TOTNODES=`cat $tmpdir/nodenos.txt | wc -l`

echo $TOTNODES node pairs processed

#cp $tmpdir/distoutput.txt distoutput_untransposed.txt

# transpose
awk -F " " '{for (f = 1; f <= NF; f++) a[NR, f] = $f } NF > nf { nf = NF } END {for (f = 1; f <= nf; f++) for (r = 1; r <= NR; r++) printf a[r, f] (r==NR ? RS : FS) }' $tmpdir/distoutput.txt | sed -e '/^ /d' > $tmpdir/distoutput2.txt

# the above sed command removes lines beginning with space 
# (for some reason the transpose includes a full copy of the 
# input at the end with spaces beginning each line...)

echo -n "Frame," > distoutput.csv
cat $tmpdir/nodenos.txt | sed "s/^/dist_/" | tr '\n' ',' >> distoutput.csv
echo >> distoutput.csv
cat $tmpdir/distoutput2.txt | sed -e 's/1e-19//g' | tr ' ' ',' >> distoutput.csv

# now we normalize each to the first value, then calculate the mean and SD

FIRSTLINE=

echo "Frame,Mean,SD" > distaverage.csv


cat distoutput.csv | (
read LINE
echo $LINE > distnormalized.csv
while read LINE
do
FRAME=`echo $LINE | cut -d',' -f1`

REST=`echo $LINE | cut -d',' -f2-`

# remove multiple commas
NUMBERS=`echo $REST | sed -e 's/,*,/,/g'`

COUNT=`echo $NUMBERS | tr ',' ' ' | wc -w | xargs`

if [ "$COUNT" -ne "$TOTNODES" ] ; then 
	echo $COUNT measurements: frame $FRAME incomplete set, skipping
	continue
fi

if [ "$FIRSTLINE" == "" ] ; then 
	echo First full set found
	echo Setting normalization values
	FIRSTLINE=$NUMBERS
	#echo $FIRSTLINE
fi

# send out to a temp file to transpose and do the calculation (is there an easier way?)
echo $NUMBERS > $tmpdir/numbers.txt
echo $FIRSTLINE >> $tmpdir/numbers.txt

#cat $tmpdir/numbers.txt
# traspose and divide
NUMBERS=`awk -F "," '{for (f = 1; f <= NF; f++) a[NR, f] = $f } NF > nf { nf = NF } END {for (f = 1; f <= nf; f++) for (r = 1; r <= NR; r++) printf a[r, f] (r==NR ? RS : FS) }' $tmpdir/numbers.txt | tr ',' '/' | bc -l | tr '\n' ','`

#strip trailing ','
NUMBERS=${NUMBERS%*,}

echo "$FRAME,$NUMBERS" >> distnormalized.csv

#echo $NUMBERS

SUM=`echo $NUMBERS | tr ',' '+' | bc -l`

MEAN=`echo "$SUM / $COUNT" | bc -l`

SUMOFDEV=`echo "($NUMBERS-$MEAN)^2" | sed "s/,/-$MEAN)\^2+(/g" | bc -l`


STDEV=`echo "sqrt($SUMOFDEV/$COUNT)" | bc -l`

#echo $REST
echo $FRAME $MEAN $STDEV

echo "$FRAME,$MEAN,$STDEV" >> distaverage.csv	
	
done
)